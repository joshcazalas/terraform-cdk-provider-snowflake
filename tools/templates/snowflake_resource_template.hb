/*
DO NOT EDIT - Generated by tools/create_cdk_provider_files.js. Refer to the README for more info.
*/

import { TerraformMetaArguments, TerraformResource } from "cdktf";
import { Construct } from "constructs";

{{#each additional_types}}
export interface {{this.name}} {
    {{#each this.properties}}
    {{this}}
    {{/each}}
}
{{/each}}

export interface {{name}}Config extends TerraformMetaArguments {
    {{#each properties}}
    {{this.name}}{{#if this.required}}{{else}}?{{/if}}: {{this.type}};
    {{/each}}
}

export class {{name}} extends TerraformResource {
    {{#each properties}}
    _{{this.name}}{{#if this.required}}{{else}}?{{/if}}: {{this.type}};
    {{/each}}
    readonly _id: string;

    public constructor(scope: Construct, id: string, config: {{name}}Config) {
        super(scope, id, {
            terraformResourceType: "snowflake_{{toLowerCase name}}",
            terraformGeneratorMetadata: {
                providerName: "snowflake"
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = id;
        {{#each properties}}
        {{#if this.regex}}if(config.{{this.name}}.match({{this.regex}})) {
            throw("Property {{this.name}} does not match required regex: {{this.regex}}")
        }{{/if}}
        this._{{this.name}} = config.{{this.name}}{{#if this.all_caps}}.toUpperCase(){{/if}};
        {{/each}}
    }
    public getAttributes(): { [name: string]: any } {
        return {
            {{#each properties}}
            {{this.name}}: this._{{this.name}},
            {{/each}}
        }
    }

    public get id(): string {
        return this._id;
    }

    public ref(attribute: string): string {
        return `\${snowflake_{{toLowerCase name}}.${this.friendlyUniqueId}.${attribute}}`;
    }

    {{#each properties}}
    public get {{this.name}}(): {{this.type}}{{#if this.required}}{{else}} | undefined{{/if}} {
        return this._{{this.name}}
    }

    public set {{this.name}}(value: {{this.type}}{{#if this.required}}{{else}} | undefined{{/if}}) {
        this._{{this.name}} = value;
    }
    {{/each}}
}

