"use strict";
/*
DO NOT EDIT - Generated by tools/create_cdk_provider_files.js. Refer to the README for more info.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Failover_Group = void 0;
const cdktf_1 = require("cdktf");
class Failover_Group extends cdktf_1.TerraformResource {
    _name;
    _allowed_accounts;
    _allowed_databases;
    _allowed_integration_types;
    _allowed_shares;
    _from_replica;
    _ignore_edition_check;
    _object_types;
    _replication_schedule;
    _id;
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: "snowflake_failover_group",
            terraformGeneratorMetadata: {
                providerName: "snowflake"
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = id;
        this._name = config.name;
        this._allowed_accounts = config.allowed_accounts;
        this._allowed_databases = config.allowed_databases;
        this._allowed_integration_types = config.allowed_integration_types;
        this._allowed_shares = config.allowed_shares;
        this._from_replica = config.from_replica;
        this._ignore_edition_check = config.ignore_edition_check;
        this._object_types = config.object_types;
        this._replication_schedule = config.replication_schedule;
    }
    getAttributes() {
        return {
            name: this._name,
            allowed_accounts: this._allowed_accounts,
            allowed_databases: this._allowed_databases,
            allowed_integration_types: this._allowed_integration_types,
            allowed_shares: this._allowed_shares,
            from_replica: this._from_replica,
            ignore_edition_check: this._ignore_edition_check,
            object_types: this._object_types,
            replication_schedule: this._replication_schedule,
        };
    }
    get id() {
        return this._id;
    }
    ref(attribute) {
        return `\${snowflake_failover_group.${this.friendlyUniqueId}.${attribute}}`;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get allowed_accounts() {
        return this._allowed_accounts;
    }
    set allowed_accounts(value) {
        this._allowed_accounts = value;
    }
    get allowed_databases() {
        return this._allowed_databases;
    }
    set allowed_databases(value) {
        this._allowed_databases = value;
    }
    get allowed_integration_types() {
        return this._allowed_integration_types;
    }
    set allowed_integration_types(value) {
        this._allowed_integration_types = value;
    }
    get allowed_shares() {
        return this._allowed_shares;
    }
    set allowed_shares(value) {
        this._allowed_shares = value;
    }
    get from_replica() {
        return this._from_replica;
    }
    set from_replica(value) {
        this._from_replica = value;
    }
    get ignore_edition_check() {
        return this._ignore_edition_check;
    }
    set ignore_edition_check(value) {
        this._ignore_edition_check = value;
    }
    get object_types() {
        return this._object_types;
    }
    set object_types(value) {
        this._object_types = value;
    }
    get replication_schedule() {
        return this._replication_schedule;
    }
    set replication_schedule(value) {
        this._replication_schedule = value;
    }
}
exports.Failover_Group = Failover_Group;
