"use strict";
/*
DO NOT EDIT - Generated by main.js. Refer to the README for more info.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.External_Table = void 0;
const cdktf_1 = require("cdktf");
class External_Table extends cdktf_1.TerraformResource {
    _column;
    _database;
    _file_format;
    _location;
    _name;
    _schema;
    _auto_refresh;
    _aws_sns_topic;
    _comment;
    _copy_grants;
    _partition_by;
    _pattern;
    _refresh_on_create;
    _table_format;
    _tag;
    _id;
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: "snowflake_external_table",
            terraformGeneratorMetadata: {
                providerName: "snowflake"
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = id;
        this._column = config.column;
        this._database = config.database;
        this._file_format = config.file_format;
        this._location = config.location;
        this._name = config.name;
        this._schema = config.schema;
        this._auto_refresh = config.auto_refresh;
        this._aws_sns_topic = config.aws_sns_topic;
        this._comment = config.comment;
        this._copy_grants = config.copy_grants;
        this._partition_by = config.partition_by;
        this._pattern = config.pattern;
        this._refresh_on_create = config.refresh_on_create;
        this._table_format = config.table_format;
        this._tag = config.tag;
    }
    getAttributes() {
        return {
            column: this._column,
            database: this._database,
            file_format: this._file_format,
            location: this._location,
            name: this._name,
            schema: this._schema,
            auto_refresh: this._auto_refresh,
            aws_sns_topic: this._aws_sns_topic,
            comment: this._comment,
            copy_grants: this._copy_grants,
            partition_by: this._partition_by,
            pattern: this._pattern,
            refresh_on_create: this._refresh_on_create,
            table_format: this._table_format,
            tag: this._tag,
        };
    }
    get id() {
        return this._id;
    }
    ref(attribute) {
        return `\${snowflake_external_table.${this.friendlyUniqueId}.${attribute}}`;
    }
    get column() {
        return this._column;
    }
    set column(value) {
        this._column = value;
    }
    get database() {
        return this._database;
    }
    set database(value) {
        this._database = value;
    }
    get file_format() {
        return this._file_format;
    }
    set file_format(value) {
        this._file_format = value;
    }
    get location() {
        return this._location;
    }
    set location(value) {
        this._location = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get schema() {
        return this._schema;
    }
    set schema(value) {
        this._schema = value;
    }
    get auto_refresh() {
        return this._auto_refresh;
    }
    set auto_refresh(value) {
        this._auto_refresh = value;
    }
    get aws_sns_topic() {
        return this._aws_sns_topic;
    }
    set aws_sns_topic(value) {
        this._aws_sns_topic = value;
    }
    get comment() {
        return this._comment;
    }
    set comment(value) {
        this._comment = value;
    }
    get copy_grants() {
        return this._copy_grants;
    }
    set copy_grants(value) {
        this._copy_grants = value;
    }
    get partition_by() {
        return this._partition_by;
    }
    set partition_by(value) {
        this._partition_by = value;
    }
    get pattern() {
        return this._pattern;
    }
    set pattern(value) {
        this._pattern = value;
    }
    get refresh_on_create() {
        return this._refresh_on_create;
    }
    set refresh_on_create(value) {
        this._refresh_on_create = value;
    }
    get table_format() {
        return this._table_format;
    }
    set table_format(value) {
        this._table_format = value;
    }
    get tag() {
        return this._tag;
    }
    set tag(value) {
        this._tag = value;
    }
}
exports.External_Table = External_Table;
