"use strict";
/*
DO NOT EDIT - Generated by main.js. Refer to the README for more info.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.Warehouse = void 0;
const cdktf_1 = require("cdktf");
class Warehouse extends cdktf_1.TerraformResource {
    _name;
    _auto_resume;
    _auto_suspend;
    _comment;
    _enable_query_acceleration;
    _initially_suspended;
    _max_cluster_count;
    _max_concurrency_level;
    _min_cluster_count;
    _query_acceleration_max_scale_factor;
    _resource_monitor;
    _scaling_policy;
    _statement_queued_timeout_in_seconds;
    _statement_timeout_in_seconds;
    _wait_for_provisioning;
    _warehouse_size;
    _warehouse_type;
    _id;
    constructor(scope, id, config) {
        super(scope, id, {
            terraformResourceType: "snowflake_warehouse",
            terraformGeneratorMetadata: {
                providerName: "snowflake"
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = id;
        this._name = config.name;
        this._auto_resume = config.auto_resume;
        this._auto_suspend = config.auto_suspend;
        this._comment = config.comment;
        this._enable_query_acceleration = config.enable_query_acceleration;
        this._initially_suspended = config.initially_suspended;
        this._max_cluster_count = config.max_cluster_count;
        this._max_concurrency_level = config.max_concurrency_level;
        this._min_cluster_count = config.min_cluster_count;
        this._query_acceleration_max_scale_factor = config.query_acceleration_max_scale_factor;
        this._resource_monitor = config.resource_monitor;
        this._scaling_policy = config.scaling_policy;
        this._statement_queued_timeout_in_seconds = config.statement_queued_timeout_in_seconds;
        this._statement_timeout_in_seconds = config.statement_timeout_in_seconds;
        this._wait_for_provisioning = config.wait_for_provisioning;
        this._warehouse_size = config.warehouse_size;
        this._warehouse_type = config.warehouse_type;
    }
    getAttributes() {
        return {
            name: this._name,
            auto_resume: this._auto_resume,
            auto_suspend: this._auto_suspend,
            comment: this._comment,
            enable_query_acceleration: this._enable_query_acceleration,
            initially_suspended: this._initially_suspended,
            max_cluster_count: this._max_cluster_count,
            max_concurrency_level: this._max_concurrency_level,
            min_cluster_count: this._min_cluster_count,
            query_acceleration_max_scale_factor: this._query_acceleration_max_scale_factor,
            resource_monitor: this._resource_monitor,
            scaling_policy: this._scaling_policy,
            statement_queued_timeout_in_seconds: this._statement_queued_timeout_in_seconds,
            statement_timeout_in_seconds: this._statement_timeout_in_seconds,
            wait_for_provisioning: this._wait_for_provisioning,
            warehouse_size: this._warehouse_size,
            warehouse_type: this._warehouse_type,
        };
    }
    get id() {
        return this._id;
    }
    ref(attribute) {
        return `\${snowflake_warehouse.${this.friendlyUniqueId}.${attribute}}`;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get auto_resume() {
        return this._auto_resume;
    }
    set auto_resume(value) {
        this._auto_resume = value;
    }
    get auto_suspend() {
        return this._auto_suspend;
    }
    set auto_suspend(value) {
        this._auto_suspend = value;
    }
    get comment() {
        return this._comment;
    }
    set comment(value) {
        this._comment = value;
    }
    get enable_query_acceleration() {
        return this._enable_query_acceleration;
    }
    set enable_query_acceleration(value) {
        this._enable_query_acceleration = value;
    }
    get initially_suspended() {
        return this._initially_suspended;
    }
    set initially_suspended(value) {
        this._initially_suspended = value;
    }
    get max_cluster_count() {
        return this._max_cluster_count;
    }
    set max_cluster_count(value) {
        this._max_cluster_count = value;
    }
    get max_concurrency_level() {
        return this._max_concurrency_level;
    }
    set max_concurrency_level(value) {
        this._max_concurrency_level = value;
    }
    get min_cluster_count() {
        return this._min_cluster_count;
    }
    set min_cluster_count(value) {
        this._min_cluster_count = value;
    }
    get query_acceleration_max_scale_factor() {
        return this._query_acceleration_max_scale_factor;
    }
    set query_acceleration_max_scale_factor(value) {
        this._query_acceleration_max_scale_factor = value;
    }
    get resource_monitor() {
        return this._resource_monitor;
    }
    set resource_monitor(value) {
        this._resource_monitor = value;
    }
    get scaling_policy() {
        return this._scaling_policy;
    }
    set scaling_policy(value) {
        this._scaling_policy = value;
    }
    get statement_queued_timeout_in_seconds() {
        return this._statement_queued_timeout_in_seconds;
    }
    set statement_queued_timeout_in_seconds(value) {
        this._statement_queued_timeout_in_seconds = value;
    }
    get statement_timeout_in_seconds() {
        return this._statement_timeout_in_seconds;
    }
    set statement_timeout_in_seconds(value) {
        this._statement_timeout_in_seconds = value;
    }
    get wait_for_provisioning() {
        return this._wait_for_provisioning;
    }
    set wait_for_provisioning(value) {
        this._wait_for_provisioning = value;
    }
    get warehouse_size() {
        return this._warehouse_size;
    }
    set warehouse_size(value) {
        this._warehouse_size = value;
    }
    get warehouse_type() {
        return this._warehouse_type;
    }
    set warehouse_type(value) {
        this._warehouse_type = value;
    }
}
exports.Warehouse = Warehouse;
