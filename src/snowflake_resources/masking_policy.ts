/*
DO NOT EDIT - Generated by main.js. Refer to the README for more info.
*/

import { TerraformMetaArguments, TerraformResource } from "cdktf";
import { Construct } from "constructs";

    export interface Masking_Policy_Signature {
        readonly column: {readonly name: string; readonly type: string; };
    }

export interface Masking_PolicyConfig extends TerraformMetaArguments {
    database: string;
    masking_expression: string;
    name: string;
    return_data_type: string;
    schema: string;
    signature: Masking_Policy_Signature[];
    comment?: string;
    exempt_other_policies?: boolean;
    if_not_exists?: boolean;
    or_replace?: boolean;
}

export class Masking_Policy extends TerraformResource {
    _database: string;
    _masking_expression: string;
    _name: string;
    _return_data_type: string;
    _schema: string;
    _signature: Masking_Policy_Signature[];
    _comment?: string;
    _exempt_other_policies?: boolean;
    _if_not_exists?: boolean;
    _or_replace?: boolean;
    readonly _id: string;

    public constructor(scope: Construct, id: string, config: Masking_PolicyConfig) {
        super(scope, id, {
            terraformResourceType: "snowflake_masking_policy",
            terraformGeneratorMetadata: {
                providerName: "snowflake"
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = id;
        
        this._database = config.database;
        
        this._masking_expression = config.masking_expression;
        
        this._name = config.name;
        
        this._return_data_type = config.return_data_type;
        
        this._schema = config.schema;
        
        this._signature = config.signature;
        
        this._comment = config.comment;
        
        this._exempt_other_policies = config.exempt_other_policies;
        
        this._if_not_exists = config.if_not_exists;
        
        this._or_replace = config.or_replace;
    }
    public getAttributes(): { [name: string]: any } {
        return {
            database: this._database,
            masking_expression: this._masking_expression,
            name: this._name,
            return_data_type: this._return_data_type,
            schema: this._schema,
            signature: this._signature,
            comment: this._comment,
            exempt_other_policies: this._exempt_other_policies,
            if_not_exists: this._if_not_exists,
            or_replace: this._or_replace,
        }
    }

    public get id(): string {
        return this._id;
    }

    public ref(attribute: string): string {
        return `\${snowflake_masking_policy.${this.friendlyUniqueId}.${attribute}}`;
    }

    public get database(): string {
        return this._database
    }

    public set database(value: string) {
        this._database = value;
    }
    
    public get masking_expression(): string {
        return this._masking_expression
    }

    public set masking_expression(value: string) {
        this._masking_expression = value;
    }
    
    public get name(): string {
        return this._name
    }

    public set name(value: string) {
        this._name = value;
    }
    
    public get return_data_type(): string {
        return this._return_data_type
    }

    public set return_data_type(value: string) {
        this._return_data_type = value;
    }
    
    public get schema(): string {
        return this._schema
    }

    public set schema(value: string) {
        this._schema = value;
    }
    
    public get signature(): Masking_Policy_Signature[] {
        return this._signature
    }

    public set signature(value: Masking_Policy_Signature[]) {
        this._signature = value;
    }
    
    public get comment(): string | undefined {
        return this._comment
    }

    public set comment(value: string | undefined) {
        this._comment = value;
    }
    
    public get exempt_other_policies(): boolean | undefined {
        return this._exempt_other_policies
    }

    public set exempt_other_policies(value: boolean | undefined) {
        this._exempt_other_policies = value;
    }
    
    public get if_not_exists(): boolean | undefined {
        return this._if_not_exists
    }

    public set if_not_exists(value: boolean | undefined) {
        this._if_not_exists = value;
    }
    
    public get or_replace(): boolean | undefined {
        return this._or_replace
    }

    public set or_replace(value: boolean | undefined) {
        this._or_replace = value;
    }
    
}

