/*
DO NOT EDIT - Generated by main.js. Refer to the README for more info.
*/

import { TerraformMetaArguments, TerraformResource } from "cdktf";
import { Construct } from "constructs";


export interface Unsafe_ExecuteConfig extends TerraformMetaArguments {
    execute: string;
    revert: string;
    query?: string;
}

export class Unsafe_Execute extends TerraformResource {
    _execute: string;
    _revert: string;
    _query?: string;
    readonly _id: string;

    public constructor(scope: Construct, id: string, config: Unsafe_ExecuteConfig) {
        super(scope, id, {
            terraformResourceType: "snowflake_unsafe_execute",
            terraformGeneratorMetadata: {
                providerName: "snowflake"
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = id;
        
        this._execute = config.execute;
        
        this._revert = config.revert;
        
        this._query = config.query;
    }
    public getAttributes(): { [name: string]: any } {
        return {
            execute: this._execute,
            revert: this._revert,
            query: this._query,
        }
    }

    public get id(): string {
        return this._id;
    }

    public ref(attribute: string): string {
        return `\${snowflake_unsafe_execute.${this.friendlyUniqueId}.${attribute}}`;
    }

    public get execute(): string {
        return this._execute
    }

    public set execute(value: string) {
        this._execute = value;
    }
    
    public get revert(): string {
        return this._revert
    }

    public set revert(value: string) {
        this._revert = value;
    }
    
    public get query(): string | undefined {
        return this._query
    }

    public set query(value: string | undefined) {
        this._query = value;
    }
    
}

