/*
DO NOT EDIT - Generated by main.js. Refer to the README for more info.
*/

import { TerraformMetaArguments, TerraformResource } from "cdktf";
import { Construct } from "constructs";


export interface TaskConfig extends TerraformMetaArguments {
    database: string;
    name: string;
    schema: string;
    sql_statement: string;
    after?: string[];
    allow_overlapping_execution?: boolean;
    comment?: string;
    enabled?: boolean;
    error_integration?: string;
    schedule?: string;
    session_parameters?: Record<string, string>;
    suspend_task_after_num_failures?: number;
    user_task_managed_initial_warehouse_size?: string;
    user_task_timeout_ms?: number;
    warehouse?: string;
    when?: string;
}

export class Task extends TerraformResource {
    _database: string;
    _name: string;
    _schema: string;
    _sql_statement: string;
    _after?: string[];
    _allow_overlapping_execution?: boolean;
    _comment?: string;
    _enabled?: boolean;
    _error_integration?: string;
    _schedule?: string;
    _session_parameters?: Record<string, string>;
    _suspend_task_after_num_failures?: number;
    _user_task_managed_initial_warehouse_size?: string;
    _user_task_timeout_ms?: number;
    _warehouse?: string;
    _when?: string;
    readonly _id: string;

    public constructor(scope: Construct, id: string, config: TaskConfig) {
        super(scope, id, {
            terraformResourceType: "snowflake_task",
            terraformGeneratorMetadata: {
                providerName: "snowflake"
            },
            provider: config.provider,
            dependsOn: config.dependsOn,
            count: config.count,
            lifecycle: config.lifecycle
        });
        this._id = id;
        
        this._database = config.database;
        
        this._name = config.name;
        
        this._schema = config.schema;
        
        this._sql_statement = config.sql_statement;
        
        this._after = config.after;
        
        this._allow_overlapping_execution = config.allow_overlapping_execution;
        
        this._comment = config.comment;
        
        this._enabled = config.enabled;
        
        this._error_integration = config.error_integration;
        
        this._schedule = config.schedule;
        
        this._session_parameters = config.session_parameters;
        
        this._suspend_task_after_num_failures = config.suspend_task_after_num_failures;
        
        this._user_task_managed_initial_warehouse_size = config.user_task_managed_initial_warehouse_size;
        
        this._user_task_timeout_ms = config.user_task_timeout_ms;
        
        this._warehouse = config.warehouse;
        
        this._when = config.when;
    }
    public getAttributes(): { [name: string]: any } {
        return {
            database: this._database,
            name: this._name,
            schema: this._schema,
            sql_statement: this._sql_statement,
            after: this._after,
            allow_overlapping_execution: this._allow_overlapping_execution,
            comment: this._comment,
            enabled: this._enabled,
            error_integration: this._error_integration,
            schedule: this._schedule,
            session_parameters: this._session_parameters,
            suspend_task_after_num_failures: this._suspend_task_after_num_failures,
            user_task_managed_initial_warehouse_size: this._user_task_managed_initial_warehouse_size,
            user_task_timeout_ms: this._user_task_timeout_ms,
            warehouse: this._warehouse,
            when: this._when,
        }
    }

    public get id(): string {
        return this._id;
    }

    public ref(attribute: string): string {
        return `\${snowflake_task.${this.friendlyUniqueId}.${attribute}}`;
    }

    public get database(): string {
        return this._database
    }

    public set database(value: string) {
        this._database = value;
    }
    
    public get name(): string {
        return this._name
    }

    public set name(value: string) {
        this._name = value;
    }
    
    public get schema(): string {
        return this._schema
    }

    public set schema(value: string) {
        this._schema = value;
    }
    
    public get sql_statement(): string {
        return this._sql_statement
    }

    public set sql_statement(value: string) {
        this._sql_statement = value;
    }
    
    public get after(): string[] | undefined {
        return this._after
    }

    public set after(value: string[] | undefined) {
        this._after = value;
    }
    
    public get allow_overlapping_execution(): boolean | undefined {
        return this._allow_overlapping_execution
    }

    public set allow_overlapping_execution(value: boolean | undefined) {
        this._allow_overlapping_execution = value;
    }
    
    public get comment(): string | undefined {
        return this._comment
    }

    public set comment(value: string | undefined) {
        this._comment = value;
    }
    
    public get enabled(): boolean | undefined {
        return this._enabled
    }

    public set enabled(value: boolean | undefined) {
        this._enabled = value;
    }
    
    public get error_integration(): string | undefined {
        return this._error_integration
    }

    public set error_integration(value: string | undefined) {
        this._error_integration = value;
    }
    
    public get schedule(): string | undefined {
        return this._schedule
    }

    public set schedule(value: string | undefined) {
        this._schedule = value;
    }
    
    public get session_parameters(): Record<string, string> | undefined {
        return this._session_parameters
    }

    public set session_parameters(value: Record<string, string> | undefined) {
        this._session_parameters = value;
    }
    
    public get suspend_task_after_num_failures(): number | undefined {
        return this._suspend_task_after_num_failures
    }

    public set suspend_task_after_num_failures(value: number | undefined) {
        this._suspend_task_after_num_failures = value;
    }
    
    public get user_task_managed_initial_warehouse_size(): string | undefined {
        return this._user_task_managed_initial_warehouse_size
    }

    public set user_task_managed_initial_warehouse_size(value: string | undefined) {
        this._user_task_managed_initial_warehouse_size = value;
    }
    
    public get user_task_timeout_ms(): number | undefined {
        return this._user_task_timeout_ms
    }

    public set user_task_timeout_ms(value: number | undefined) {
        this._user_task_timeout_ms = value;
    }
    
    public get warehouse(): string | undefined {
        return this._warehouse
    }

    public set warehouse(value: string | undefined) {
        this._warehouse = value;
    }
    
    public get when(): string | undefined {
        return this._when
    }

    public set when(value: string | undefined) {
        this._when = value;
    }
    
}

